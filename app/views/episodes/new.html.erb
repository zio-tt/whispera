<% content_for :reload do %>
  <meta name="turbo-visit-control" content="reload">
<% end %>

<section class="text-gray-600 body-font relative">
  <div class="container px-5 py-16 mx-auto flex sm:flex-nowrap flex-wrap">

    <!-- ここから入力フォーム -->
    <div class="lg:w-1/3 md:w-1/2 bg-white flex flex-col md:ml-auto w-full md:py-8 mt-8 md:mt-0 mr-5">
      <h2 class="text-gray-900 text-lg mb-1 font-medium title-font">思い出を綴る</h2>
      <p class="leading-relaxed mb-5 text-gray-600">テーマに沿った「青春の思い出」を綴ってください。</p>

      <%= form_with(model: @episode, url: episodes_path) do |form| %>
        <div class="relative mb-4">
          <%= form.label :title, class: "leading-7 text-sm text-gray-600" %>
          <%= form.text_field :title, id: "title-field", class: "w-full bg-white rounded border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out" %>
        </div>
        <div class="relative mb-4">
          <%= form.select :theme, Episode::THEMES, {} , id: "theme-select", class: "episode_theme" %>
          <button type="button" id="random-theme-button">ランダムテーマ選択</button>
        </div>
        <div class="relative mb-4">
          <%= form.label :content %>
          <%= form.text_area :content, id: "input-field", class: "w-full bg-white rounded border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 h-32 text-base outline-none text-gray-700 py-1 px-3 resize-none leading-6 transition-colors duration-200 ease-in-out" %>
        </div>
        <%= form.submit '投稿する', class: 'btn btn-primary text-lg"' %>
        <p class="text-xs text-gray-500 mt-3"></br>ひらがな・カタカナ・漢字・英数字をご利用いただけます。</p>
        <p class="text-xs text-gray-500 mt-3">半角スペース・全角スペースは使用しないようお願いいたします。</p>
        <p class="text-xs text-gray-500 mt-3">投稿した内容はブラウザを閉じるまで編集・削除が可能です。</p>
      <% end %>
    </div>

    <div class="lg:w-2/3 md:w-1/2 bg-gray-200 rounded-lg overflow-hidden sm:mr-10 p-10 flex items-end justify-center relative">
      <div class="row mx-2" id="row20" style="display: inline-block; _display: inline;"></div>
      <% 19.times do |n| %>
        <div class="row mr-2" id="row<%= 19-n %>" style="display: inline-block; _display: inline;"></div>
      <% end %>

      <div id="random-theme-data" data-themes='<%= raw Episode::THEMES.to_json %>'></div>

      <script>
        const titleField = document.querySelector('#title-field');
        const inputField = document.querySelector('#input-field');
        const themeValue = document.querySelector('#theme-select');
        const rows = document.querySelectorAll('.row');
        const themeSelect = document.getElementById('theme-select');


        function updateThemes() {
          // テーマの表示
          const themeText = themeSelect.value; // 選択されたテーマを取得
          let themeVerticalText = convertToVerticalText(themeText); // 縦書き用にテーマを変換
          const themeTreatedText = themeVerticalText.split('');
          const themeArray = [];

          for (let i = 0; i < (15 - themeTreatedText.length); i++) {
            themeArray.push('　'); // 空白を追加
          }
          if (themeTreatedText != "") {
            themeArray.push(...themeTreatedText, "について"); // テーマの文字を追加
          };
          rows[18].textContent = themeArray.join(''); // 表示
        }


        document.addEventListener('DOMContentLoaded', function () {
          const randomThemeButton = document.getElementById('random-theme-button');
          const randomThemeData = document.getElementById('random-theme-data');

          if (randomThemeData) {
            const themesJson = randomThemeData.getAttribute('data-themes');
            const themes = JSON.parse(themesJson);

            randomThemeButton.addEventListener('click', function () {
              if (themes.length > 0) {
                const randomIndex = Math.floor(Math.random() * themes.length);
                themeValue.value = themes[randomIndex];
                updateThemes();
              }
            });
          }
        });

        function convertToVerticalText(text) {
          let verticalText = '';

          text.split('').forEach(char => {
            if (char.match(/[A-Za-z0-9\s]/)) {
              verticalText += char.replace(/[A-Za-z0-9\s]/, s => String.fromCharCode(s.charCodeAt(0) + 0xFEE0));
            } else {
              verticalText += char;
            }
          });

          return verticalText;
        }


        function updateRows() {
          const titleText = titleField.value;
          const inputText = inputField.value;
          let contentArray = [];

          // titleの処理
          if (titleText.length > 0) {
            rows[19].textContent = '　　' + convertToVerticalText(titleText);
          } else {
            rows[19].textContent = '';
          }

         // contentの処理
          inputText.split('\n').forEach(line => {
            while (line.length > 0) {
              // 縦書き用にテキストを変換
              const convertedLine = convertToVerticalText(line);

              if (convertedLine.length <= 19) {
                contentArray.push('　' + convertedLine);
                line = '';
              } else {
                const firstRow = convertedLine.length > 19 ? convertedLine.substr(0, 19) : convertedLine.substr(0, 20);
                contentArray.push('　' + firstRow);
                line = convertedLine.substr(firstRow.length);
                while (line.length > 0) {
                  contentArray.push(line.substr(0, 20));
                  line = line.substr(20);
                }
              }
            }
          });

          for (let i = 0; i < rows.length - 2; i++) {
            const reversedIndex = rows.length - 3 - i;
            if (contentArray[i]) {
              rows[reversedIndex].textContent = contentArray[i];
            } else {
              rows[reversedIndex].textContent = '';
            }
          }
        }
        titleField.addEventListener('input', updateRows);
        inputField.addEventListener('input', updateRows);
        themeSelect.addEventListener('change', updateThemes);


      </script>

      <style type="text/css">
        .row {
          width: 34px;
          height: 524px;
          border: 2px solid #b35900;
          background-color: #ffffff;
          background-image: linear-gradient(to right, #ffffff, #ffffff 10%, #b35900 11%, #b35900 12%, transparent 13%, transparent 87%, #b35900 88%, #b35900 89%, #ffffff 90%, #ffffff),
              linear-gradient(to bottom, transparent, transparent 97%, #b35900 98%, #b35900);
          background-position: right 2px top;
          background-size: 33px 26px;
          font-size: 20px; /* 文字サイズを変更 */
          line-height: 20px; /* 行間を調整 */
          letter-spacing: 6px;
          writing-mode: vertical-lr; /* 縦書きモード */
        }
      </style>
    </div>
  </div>
</section>
